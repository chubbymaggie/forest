; ModuleID = '<stdin>'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-f128:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@environ = external global i8**

define i8* @uc_getenv(i8* %a) nounwind {
b:
  %r = alloca i8*, align 8
  %r1 = alloca i8*
  %r2 = alloca i8*
  %r3 = alloca i32
  %r4 = alloca i8**
  %r5 = bitcast i32 0 to i32
  store i8* %a, i8** %r                                               // en r se guarda la key que estoy buscando (PATH)
  %r6 = load i8*** @environ, align 8                                  // environ es un doble puntero a char
  store i8** %r6, i8*** %r4, align 8                                  // environ se guarda en r4
  %r7 = load i8*** %r4, align 8
  %r8 = icmp eq i8** %r7, null
  br i1 %r8, label %b39, label %b40

b39:                                              ; preds = %b
  store i8* null, i8** %r2, align 8
  br label %b47

b40:                                              ; preds = %b
  %r9 = load i8** %r, align 8
  %r10 = call i64 @strlen(i8* %r9) nounwind readonly                 // strlen de la key
  %r11 = trunc i64 %r10 to i32
  store i32 %r11, i32* %r3, align 4                                  // En r3 se guarda el resultado de strlen
  br label %b45

b41:                                              ; preds = %b45
  %r12 = load i32* %r3, align 4
  %r13 = sext i32 %r12 to i64
  %r14 = load i8*** %r4, align 8
  %r15 = load i8** %r14, align 8
  %r16 = load i8** %r, align 8
  %r17 = call i32 @memcmp(i8* %r16, i8* %r15, i64 %r13) nounwind readonly   // compara la key con un puntero que recorre environ, n = tamaño de la key
  %r18 = icmp eq i32 %r17, 0
  br i1 %r18, label %b42, label %b44                                        // si encuentra la key, salta a b42

b42:                                              ; preds = %b41
  %r19 = load i8*** %r4, align 8                                            // en r19 se carga environ
  %r20 = load i8** %r19, align 8                                            // en r20 se carga el contenido de environ
  %r21 = load i32* %r3, align 4                                             // carga la longitud de la key
  %r22 = sext i32 %r21 to i64                                               // en r22 está la longitud de la key
  %r23 = getelementptr inbounds i8* %r20, i64 %r22                          // r23 es un puntero a environ + longitud de la key
  %r24 = load i8* %r23, align 1                                             // carga el puntero a i8
  %r25 = icmp eq i8 %r24, 61                                                // compara con 0
  br i1 %r25, label %b43, label %b44                                        // si era 0 (la key terminó) salta a b43

b43:                                              ; preds = %b42
  %r26 = load i8*** %r4, align 8                                            // carga environ en r26
  %r27 = load i8** %r26, align 8                                            // carga el contenido de environ en r27
  %r28 = load i32* %r3, align 4                                             // carga el resultado de strlen en r28
  %r29 = sext i32 %r28 to i64                                               // carga el resultado de strlen en r29
  %r30 = getelementptr inbounds i8* %r27, i64 %r29                          // environ + strlen
  %r31 = getelementptr inbounds i8* %r30, i64 1                             // environ + strlen + 1
  store i8* %r31, i8** %r2, align 8                                         // environ + strlen + 1 a r2
  br label %b47

b44:                                              ; preds = %b42, %b41
  %r32 = load i8*** %r4, align 8
  %r33 = getelementptr inbounds i8** %r32, i64 1
  store i8** %r33, i8*** %r4, align 8
  br label %b45

b45:                                              ; preds = %b44, %b40
  %r34 = load i8*** %r4, align 8
  %r35 = load i8** %r34, align 8
  %r36 = icmp ne i8* %r35, null
  br i1 %r36, label %b41, label %b46

b46:                                              ; preds = %b45
  store i8* null, i8** %r2, align 8
  br label %b47

b47:                                              ; preds = %b46, %b43, %b39
  %r37 = load i8** %r2, align 8
  store i8* %r37, i8** %r1, align 8                                       // guarda r2 en r1
  br label %b48

b48:                                              ; preds = %b47
  %r38 = load i8** %r1
  ret i8* %r38                                                            // devuelve r1
}

declare i64 @strlen(i8*) nounwind readonly

declare i32 @memcmp(i8*, i8*, i64) nounwind readonly
